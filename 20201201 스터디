SELECT * FROM JOBS;
SELECT * FROM EMPLOYEES;
--1
SELECT A.JOB_ID, B. SALARY, A.MIN_SALARY, A.MAX_SALARY ,B.LAST_NAME ||' '||B.FIRST_NAME EMP_NAME
FROM JOBS A, EMPLOYEES B
WHERE A.JOB_ID = B.JOB_ID AND
(B.SALARY < A.MIN_SALARY OR
B.SALARY > A.MAX_SALARY) ;

--2
SELECT *FROM EMPLOYEES;
SELECT *FROM JOB_HISTORY;
SELECT A.EMPLOYEE_ID, A.FIRST_NAME || ' ' ||A.LAST_NAME EMP_NAMES, B.*
FROM EMPLOYEES A,
JOB_HISTORY B 
WHERE A.EMPLOYEE_ID(+) = B.EMPLOYEE_ID
ORDER BY 1;
--jOB_HISTORY에 속한 모든데이터가 공통으로 A에 속하기 때문 B가A의 부분집합이기 때문이다. 
--3
SELECT A.EMPLOYEE_ID, A.FIRST_NAME || ' ' ||A.LAST_NAME EMP_NAME, A.MANAGER_ID, 
B.FIRST_NAME||' ' ||B.LAST_NAME MANAGER_NAME
FROM EMPLOYEES A, EMPLOYEES B
WHERE A.MANAGER_ID =B.EMPLOYEE_ID
ORDER BY 1;
--100번 STEVEN KING은 MANAGER_ID가 없기 때문에 누락된다. 
--4
SELECT A.EMPLOYEE_ID, A.FIRST_NAME || ' ' ||A.LAST_NAME EMP_NAME, A.MANAGER_ID, 
B.FIRST_NAME||' ' ||B.LAST_NAME MANAGER_NAME
FROM EMPLOYEES A, EMPLOYEES B
WHERE A.MANAGER_ID = B.EMPLOYEE_ID(+)
ORDER BY 1;
--5
SELECT *FROM EMPLOYEES;
SELECT A.FIRST_NAME, A.LAST_NAME, C.CITY
FROM EMPLOYEES A, DEPARTMENTS B, LOCATIONS C
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID AND 
    B.LOCATION_ID = C.LOCATION_ID AND 
    A.FIRST_NAME = 'David' AND 
    A.SALARY >=6000;
--6
SELECT * FROM ORDERS;
SELECT * FROM CUSTOMERS;
SELECT * FROM STORES;
SELECT * FROM STAFFS;

SELECT A.ORDER_ID, A.ORDER_DATE, B.FIRST_NAME ||''||B.LAST_NAME CUSTOMER_NAME, 
C.STORE_NAME, D.FIRST_NAME ||''||D.LAST_NAME STAFF_NAME
FROM ORDERS A, CUSTOMERS B, STORES C, STAFFS D
WHERE 
A.CUSTOMER_ID = B.CUSTOMER_ID AND 
A.STORE_ID = C.STORE_ID AND
A.STAFF_ID = D.STAFF_ID AND
TO_CHAR(A.ORDER_DATE,'YYYYMM')='201801'
ORDER BY 1
;

--7
SELECT *FROM ORDERS;
SELECT *FROM ORDER_ITEMS;

SELECT TO_CHAR(A.ORDER_DATE,'YYYY-MM') MONTHS, SUM(B.QUANTITY*B.LIST_PRICE) ORDER_AMT
FROM ORDERS A LEFT JOIN ORDER_ITEMS B 
ON A. ORDER_ID = B.ORDER_ID
WHERE TO_CHAR(A.ORDER_DATE,'YYYY')='2018'
GROUP BY TO_CHAR(A.ORDER_DATE,'YYYY-MM')
ORDER BY 1
;
--8
SELECT TO_CHAR(A.ORDER_DATE,'YYYY-Q') QUARTER, D.BRAND_NAME, SUM(B.QUANTITY*B.LIST_PRICE) ORDER_AMT
FROM ORDERS A LEFT JOIN ORDER_ITEMS B 
ON A. ORDER_ID = B.ORDER_ID 
RIGHT JOIN PRODUCTS C
ON B.PRODUCT_ID = C.PRODUCT_ID
RIGHT JOIN BRANDS D
ON C.BRAND_ID = D.BRAND_ID
WHERE TO_CHAR(A.ORDER_DATE,'YYYY')=2018  
GROUP BY TO_CHAR(A.ORDER_DATE,'YYYY-Q'), D.BRAND_NAME
HAVING SUM(B.QUANTITY*B.LIST_PRICE)>=10000
ORDER BY 1;

--9
SELECT *FROM ORDERS;
SELECT *FROM ORDER_ITEMS;
SELECT * FROM STORES;

SELECT TO_CHAR(A.ORDER_DATE,'YYYY') YEAR, C.STORE_NAME, SUM(B.QUANTITY*B.LIST_PRICE) ORDER_AMT
FROM ORDERS A LEFT JOIN ORDER_ITEMS B 
ON A. ORDER_ID = B.ORDER_ID 
RIGHT JOIN STORES C
ON A.STORE_ID = C.STORE_ID  
GROUP BY TO_CHAR(A.ORDER_DATE,'YYYY'),C. STORE_NAME
ORDER BY 1;

--10
SELECT *FROM EMPLOYEES;
SELECT A.DEPARTMENT_ID, A.DEPARTMENT_NAME, B.FIRST_NAME ||' '||B.LAST_NAME EMP_NAME, B.HIRE_DATE, B.SALARY,
SUM(B.SALARY) OVER(PARTITION BY A.DEPARTMENT_NAME ORDER BY B.HIRE_DATE, B.SALARY)누적합계
FROM DEPARTMENTS A,
    EMPLOYEES B
WHERE A.DEPARTMENT_ID=B.DEPARTMENT_ID
ORDER BY 2,4,5;


select a.department_id, a.department_name, b.first_name || ' ' || b.last_name emp_name,
    b.hire_date, b.salary,
    sum(b.salary) over(
        partition by a.department_id
        order by b.hire_date) 누적급여
from departments a, employees b
where a.department_id = b.department_id
order by 2,4
